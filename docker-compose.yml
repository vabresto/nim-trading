services:
  db:
    image: postgres:16.2-alpine
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - db_net
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${MD_PG_USER}
      POSTGRES_PASSWORD: ${MD_PG_PASS}
      POSTGRES_DB: ${MD_PG_NAME}

  redis:
    image: redis/redis-stack:7.2.0-v9
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - redis_net
    ports:
      - 8001:8001
      # - 6379:6379
    environment:
      REDIS_ARGS: "--requirepass ${MD_REDIS_PASS}"

  market-data-websocket:
    image: project-ny
    command: /ny/bin/ny-md-ws --heartbeat
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - db_net
      - redis_net
      - monitor_net
    environment:
      # Just for logs; need to be a bit careful not to accidentally use local times though
      TZ: America/New_York
      MD_REDIS_HOST: ${MD_REDIS_HOST}
      MD_REDIS_PASS: ${MD_REDIS_PASS}
      # Readonly usage to get configs
      MD_PG_HOST: ${MD_PG_HOST}
      MD_PG_USER: ${MD_PG_USER}
      MD_PG_PASS: ${MD_PG_PASS}
      MD_PG_NAME: ${MD_PG_NAME}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_API_SECRET: ${ALPACA_API_SECRET}
  
  market-data-recorder:
    image: project-ny
    command: /ny/bin/ny-md-rec --heartbeat
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - db_net
      - redis_net
      - monitor_net
    environment:
      TZ: America/New_York
      MD_REDIS_HOST: ${MD_REDIS_HOST}
      MD_REDIS_PASS: ${MD_REDIS_PASS}
      MD_PG_HOST: ${MD_PG_HOST}
      MD_PG_USER: ${MD_PG_USER}
      MD_PG_PASS: ${MD_PG_PASS}
      MD_PG_NAME: ${MD_PG_NAME}

  order-update-recorder:
    image: project-ny
    command: /ny/bin/ny-ou-rec --heartbeat
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - db_net
      - redis_net
      - monitor_net
    environment:
      TZ: America/New_York
      MD_REDIS_HOST: ${MD_REDIS_HOST}
      MD_REDIS_PASS: ${MD_REDIS_PASS}
      MD_PG_HOST: ${MD_PG_HOST}
      MD_PG_USER: ${MD_PG_USER}
      MD_PG_PASS: ${MD_PG_PASS}
      MD_PG_NAME: ${MD_PG_NAME}

  order-update-websocket:
    image: project-ny
    command: /ny/bin/ny-ou-ws --heartbeat
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - db_net
      - redis_net
      - monitor_net
    environment:
      TZ: America/New_York
      MD_REDIS_HOST: ${MD_REDIS_HOST}
      MD_REDIS_PASS: ${MD_REDIS_PASS}
      # Readonly usage to get configs
      MD_PG_HOST: ${MD_PG_HOST}
      MD_PG_USER: ${MD_PG_USER}
      MD_PG_PASS: ${MD_PG_PASS}
      MD_PG_NAME: ${MD_PG_NAME}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_API_SECRET: ${ALPACA_API_SECRET}

  runner-strategy-dummy:
    image: project-ny
    command: /ny/bin/ny-runner --heartbeat --monitor-address monitor
    restart: always
    depends_on:
      - db
      - redis
    networks:
      - db_net
      - redis_net
      - monitor_net
    environment:
      TZ: America/New_York
      MD_REDIS_HOST: ${MD_REDIS_HOST}
      MD_REDIS_PASS: ${MD_REDIS_PASS}
      # Readonly usage to get configs
      MD_PG_HOST: ${MD_PG_HOST}
      MD_PG_USER: ${MD_PG_USER}
      MD_PG_PASS: ${MD_PG_PASS}
      MD_PG_NAME: ${MD_PG_NAME}
      ALPACA_API_KEY: ${ALPACA_API_KEY}
      ALPACA_API_SECRET: ${ALPACA_API_SECRET}

  monitor:
    image: project-ny
    command: /ny/bin/ny-monitor
    restart: always
    networks:
      - monitor_net
    ports:
      - 8080:8080
    environment:
      TZ: America/New_York
      NY_MON_TARGETS: "market-data-websocket, market-data-recorder, order-update-recorder, order-update-websocket, runner-strategy-dummy"


volumes:
  db_data:
  redis_data:


networks:
  db_net:
  redis_net:
  monitor_net:
